from aiogram import Router, types
from aiogram.filters import Command
from utils.database import get_user_profile, get_today_mealplan, save_mealplan
from utils.calorie_calc import calc_calories
from datetime import datetime

router = Router()

@router.message(Command("mealplan"))
async def mealplan_handler(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)

    if not profile:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /wizard.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –º–µ–Ω—é
    today_plan = get_today_mealplan(user_id)
    if today_plan:
        await message.answer(f"üçΩÔ∏è –¢–≤–æ—ë –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≥–æ—Ç–æ–≤–æ:\n\n{today_plan}")
        return

    kcal = calc_calories(**profile)
    breakfast = round(kcal * 0.3)
    lunch = round(kcal * 0.4)
    dinner = round(kcal * 0.3)

    text = (
        f"<b>üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫: {breakfast} –∫–∫–∞–ª\n"
        f"ü•ó –û–±–µ–¥: {lunch} –∫–∫–∞–ª\n"
        f"üç≤ –£–∂–∏–Ω: {dinner} –∫–∫–∞–ª\n\n"
        f"üí° –≠—Ç–æ –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å. –ú–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–µ–±—è."
    )

    save_mealplan(user_id, datetime.now().strftime("%Y-%m-%d"), text)
    await message.answer(text, parse_mode="HTML")
