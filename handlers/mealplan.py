from aiogram import Router, types
from aiogram.filters import Command
from utils.database import get_user_dashboard
from utils.meal_generator import generate_mealplan
from utils.calorie_calc import calc_calories

router = Router()

@router.message(Command("mealplan"))
async def mealplan(message: types.Message):
    user_id = message.from_user.id
    stats = get_user_dashboard(user_id)

    if not stats["last_weight"]:
        await message.answer("‚ö†Ô∏è –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–µ—Å —á–µ—Ä–µ–∑ /progress, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω.")
        return

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    weight = stats["last_weight"]
    height = 170
    age = 27
    gender = 'm'
    activity = 1.38
    goal = weight - 3  # —Ö—É–¥–µ–µ–º

    kcal = calc_calories(weight, height, age, gender, activity, goal)
    meals = generate_mealplan(kcal)

    text = f"üçΩÔ∏è <b>–¢–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (~{int(kcal)} –∫–∫–∞–ª):</b>\n\n"
    for meal, desc in meals.items():
        text += f"‚ñ™Ô∏è <b>{meal}</b>: {desc}\n"
    
    await message.answer(text, parse_mode="HTML")
