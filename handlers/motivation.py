from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_advisor import ask_openai
from utils.notifications import schedule_daily_motivation, add_user_for_motivation

router = Router()

class MotivationStates(StatesGroup):
    awaiting_time = State()

@router.message(Command("motivation"))
async def send_motivation(message: types.Message):
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, —Å–∏–ª—ã –≤–æ–ª–∏. "
        "–¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É."
    )
    try:
        text = await ask_openai(prompt)
    except Exception:
        text = "–°–µ–≥–æ–¥–Ω—è ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí™"
    await message.answer(f"üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n\n{text}")

@router.message(Command("motivation_time"))
async def cmd_set_motivation_time(message: types.Message, state: FSMContext):
    await message.answer("‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")
    await state.set_state(MotivationStates.awaiting_time)

@router.message(MotivationStates.awaiting_time)
async def process_motivation_time(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        hour, minute = map(int, text.split(":"))
        assert 0 <= hour < 24 and 0 <= minute < 60
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00")
        return

    chat_id = message.chat.id
    add_user_for_motivation(chat_id, hour, minute)
    await message.answer(f"üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {text}!")
    await state.clear()
