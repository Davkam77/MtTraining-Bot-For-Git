from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_advisor import ask_openai
from utils.notifications import schedule_daily_motivation, add_user_for_motivation

router = Router()

class MotivationStates(StatesGroup):
    awaiting_time = State()

@router.message(Command("motivation"))
async def send_motivation(message: types.Message):
    prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, —Å–∏–ª—ã –≤–æ–ª–∏. –ù–∞ —Ä—É—Å—Å–∫–æ–º, –¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    try:
        text = await ask_openai(prompt)
    except:
        text = "–°–µ–≥–æ–¥–Ω—è ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí™"
    await message.answer(f"üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n\n{text}")

@router.message(Command("motivation_time"))
async def cmd_set_motivation_time(message: types.Message, state: FSMContext):
    await message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)")
    await state.set_state(MotivationStates.awaiting_time)

@router.message(MotivationStates.awaiting_time)
async def process_motivation_time(message: types.Message, state: FSMContext):
    try:
        hour, minute = map(int, message.text.strip().split(":"))
        assert 0 <= hour < 24 and 0 <= minute < 60
    except:
        await message.answer("‚ùó –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: 07:30")
        return

    add_user_for_motivation(message.chat.id, hour, minute)
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {hour:02}:{minute:02}")
    await state.clear()

def get_daily_motivation():
    return "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ! üí™"
