from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.scheduler import schedule_meal_reminders

router = Router()

@router.message(Command("wake"))
async def wake_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30).")

    await state.set_state("awaiting_wake_time")

@router.message(lambda msg: msg.text and ":" in msg.text)
async def handle_wake_time(message: types.Message, state: FSMContext):
    wake_time = message.text.strip()

    try:
        schedule_meal_reminders(wake_time)
        await state.clear()
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {wake_time}. –Ø –Ω–∞–ø–æ–º–Ω—é –æ –ø–∏—Ç–∞–Ω–∏–∏ –≤–æ–≤—Ä–µ–º—è üí™")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 07:30.")
