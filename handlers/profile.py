from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.calorie_calc import calc_calories
from utils.database import get_user_profile

router = Router()

@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    data = get_user_profile(user_id)

    if not data:
        await message.answer("‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏ /wizard.")
        return

    kcal = calc_calories(
        weight=data["weight"],
        height=data["height"],
        age=data["age"],
        gender=data["gender"],
        activity=data["activity"],
        goal=data["goal"]
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="profile_reset")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="profile_progress")],
        [InlineKeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é", callback_data="profile_mealplan")],
    ])

    await message.answer(
        f"üßç‚Äç‚ôÇÔ∏è <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
        f"üîπ –í–µ—Å: <b>{data['weight']} –∫–≥</b>\n"
        f"üîπ –¶–µ–ª—å: <b>{data['goal']} –∫–≥</b>\n"
        f"üîπ –†–æ—Å—Ç: <b>{data['height']} —Å–º</b>\n"
        f"üîπ –í–æ–∑—Ä–∞—Å—Ç: <b>{data['age']}</b>\n"
        f"üîπ –ü–æ–ª: <b>{'–ú—É–∂—Å–∫–æ–π' if data['gender'] == 'm' else '–ñ–µ–Ω—Å–∫–∏–π'}</b>\n"
        f"üîπ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{data['activity']}</b>\n"
        f"üîπ –†–µ–∫–æ–º. –∫–∞–ª–æ—Ä–∏–∏: <b>{round(kcal)} –∫–∫–∞–ª/–¥–µ–Ω—å</b>",
        parse_mode="HTML",
        reply_markup=kb
    )

@router.callback_query(F.data == "profile_reset")
async def cb_reset(call: types.CallbackQuery):
    await call.message.answer("üîÅ –ß—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∑–∞–ø—É—Å—Ç–∏ /wizard")
    await call.answer()

@router.callback_query(F.data == "profile_progress")
async def cb_progress(call: types.CallbackQuery):
    await call.message.answer("üìä –í–≤–µ–¥–∏ /progress –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Å–∞.")
    await call.answer()

@router.callback_query(F.data == "profile_mealplan")
async def cb_mealplan(call: types.CallbackQuery):
    await call.message.answer("üçΩÔ∏è –í–≤–µ–¥–∏ /mealplan –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é.")
    await call.answer()
