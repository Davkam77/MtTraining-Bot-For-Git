from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_advisor import ask_openai

router = Router()

class AdviceStates(StatesGroup):
    awaiting_question = State()

@router.message(Command("advice"))
async def advice_handler(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–µ—Å —Å—Ç–æ–∏—Ç?' –∏–ª–∏ '–ü—Ä–∏–¥—É–º–∞–π –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –±–µ–∑ –º—è—Å–∞'):")
    await state.set_state(AdviceStates.awaiting_question)

@router.message(AdviceStates.awaiting_question)
async def advice_answer(message: types.Message, state: FSMContext):
    question = message.text.strip()
    await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    answer = ask_openai(question)
    await message.answer(f"üí° {answer}")
    await state.clear()
