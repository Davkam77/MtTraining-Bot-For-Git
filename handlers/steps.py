from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from utils.database import update_steps, get_steps_by_user

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
class StepsStates(StatesGroup):
    awaiting_steps = State()

@router.message(Command("steps"))
async def steps_handler(message: types.Message, state: FSMContext):
    await message.answer("üö∂‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):")
    await state.set_state(StepsStates.awaiting_steps)

@router.message(StateFilter(StepsStates.awaiting_steps), lambda msg: msg.text.isdigit())
async def handle_steps(message: types.Message, state: FSMContext):
    steps = int(message.text)
    user_id = message.from_user.id

    update_steps(user_id, steps)
    total = get_steps_by_user(user_id)

    # –†–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π
    calories = round(steps * 0.045, 2)

    await message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –°–µ–≥–æ–¥–Ω—è —Ç—ã –ø—Ä–æ—à—ë–ª <b>{steps}</b> —à–∞–≥–æ–≤. "
        f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{calories} –∫–∫–∞–ª</b> üî•\n"
        f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {total} —à–∞–≥–æ–≤ üí™",
        parse_mode="HTML"
    )
    await state.clear()

@router.message(StateFilter(StepsStates.awaiting_steps))
async def invalid_steps(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 7823")
