import json
import os
import random
import logging
from utils.user_settings import get_user_plan

WORKOUT_PATH = os.path.join("data", "workouts.json")


def load_workout(user_id: int):
    plan_length = get_user_plan(user_id)
    file_path = os.path.join("data", "workouts.json")

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        all_workouts = data.get(plan_length)
        if not all_workouts:
            return f"‚ùó –ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∞ {plan_length}."

        # ‚è± –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–ª–∞–Ω–∞
        duration = None
        if "," in plan_length:
            _, time_part = plan_length.split(",", 1)
            duration = time_part.strip()

        # üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        filtered = [w for w in all_workouts if w.get("duration") == duration]
        if not filtered:
            return f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ {duration} –¥–ª—è –ø–ª–∞–Ω–∞ {plan_length}"

        workout = random.choice(filtered)
        exercises = "\n".join([f"‚Ä¢ {ex}" for ex in workout["exercises"]])
        return f"<b>üèãÔ∏è {workout['name']}</b>\n‚è± {workout['duration']}\n\n{exercises}"

    except Exception as e:
        return f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"



def generate_workout() -> str:
    try:
        with open(WORKOUT_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)

        all_workouts = []
        for plan in data.values():
            all_workouts.extend(plan)

        if not all_workouts:
            return "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."

        workout = random.choice(all_workouts)
        exercises = "\n".join([f"‚Ä¢ {ex}" for ex in workout.get("exercises", [])])
        return f"<b>üèãÔ∏è {workout.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n‚è± {workout.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n{exercises}"

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {str(e)}"
